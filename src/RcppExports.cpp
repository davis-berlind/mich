// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// multi_mu_bar_fn
NumericMatrix multi_mu_bar_fn(NumericMatrix b, NumericVector prob);
RcppExport SEXP _mich_multi_mu_bar_fn(SEXP bSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_mu_bar_fn(b, prob));
    return rcpp_result_gen;
END_RCPP
}
// multi_mu2_bar_fn
NumericMatrix multi_mu2_bar_fn(NumericMatrix b, NumericVector omega, NumericVector prob);
RcppExport SEXP _mich_multi_mu2_bar_fn(SEXP bSEXP, SEXP omegaSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_mu2_bar_fn(b, omega, prob));
    return rcpp_result_gen;
END_RCPP
}
// mu_bar_fn
NumericVector mu_bar_fn(NumericVector b, NumericVector prob);
RcppExport SEXP _mich_mu_bar_fn(SEXP bSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_bar_fn(b, prob));
    return rcpp_result_gen;
END_RCPP
}
// mu2_bar_fn
NumericVector mu2_bar_fn(NumericVector b, NumericVector omega, NumericVector prob);
RcppExport SEXP _mich_mu2_bar_fn(SEXP bSEXP, SEXP omegaSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(mu2_bar_fn(b, omega, prob));
    return rcpp_result_gen;
END_RCPP
}
// lambda_bar_fn
NumericVector lambda_bar_fn(NumericVector u, NumericVector v, NumericVector prob);
RcppExport SEXP _mich_lambda_bar_fn(SEXP uSEXP, SEXP vSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_bar_fn(u, v, prob));
    return rcpp_result_gen;
END_RCPP
}
// mu_lambda_fn
NumericVector mu_lambda_fn(NumericVector b, NumericVector u, NumericVector v, NumericVector prob);
RcppExport SEXP _mich_mu_lambda_fn(SEXP bSEXP, SEXP uSEXP, SEXP vSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_lambda_fn(b, u, v, prob));
    return rcpp_result_gen;
END_RCPP
}
// mu2_lambda_fn
NumericVector mu2_lambda_fn(NumericVector b, NumericVector omega, NumericVector u, NumericVector v, NumericVector prob);
RcppExport SEXP _mich_mu2_lambda_fn(SEXP bSEXP, SEXP omegaSEXP, SEXP uSEXP, SEXP vSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(mu2_lambda_fn(b, omega, u, v, prob));
    return rcpp_result_gen;
END_RCPP
}
// mich_cpp
List mich_cpp(NumericVector y, int J, int L, int K, double mu_0, double lambda_0, bool fit_intercept, bool fit_scale, bool refit, double max_iter, bool verbose, double tol, double omega_j, double u_j, double v_j, NumericMatrix log_pi_j, NumericMatrix pi_bar_j, NumericMatrix log_pi_bar_j, NumericMatrix b_bar_j, NumericMatrix omega_bar_j, NumericVector u_bar_j, NumericMatrix v_bar_j, NumericVector lgamma_u_bar_j, NumericVector digamma_u_bar_j, double omega_l, NumericMatrix log_pi_l, NumericMatrix pi_bar_l, NumericMatrix log_pi_bar_l, NumericMatrix b_bar_l, NumericMatrix omega_bar_l, double u_k, double v_k, NumericMatrix log_pi_k, NumericMatrix pi_bar_k, NumericMatrix log_pi_bar_k, NumericVector u_bar_k, NumericMatrix v_bar_k, NumericVector lgamma_u_bar_k, NumericVector digamma_u_bar_k);
RcppExport SEXP _mich_mich_cpp(SEXP ySEXP, SEXP JSEXP, SEXP LSEXP, SEXP KSEXP, SEXP mu_0SEXP, SEXP lambda_0SEXP, SEXP fit_interceptSEXP, SEXP fit_scaleSEXP, SEXP refitSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP omega_jSEXP, SEXP u_jSEXP, SEXP v_jSEXP, SEXP log_pi_jSEXP, SEXP pi_bar_jSEXP, SEXP log_pi_bar_jSEXP, SEXP b_bar_jSEXP, SEXP omega_bar_jSEXP, SEXP u_bar_jSEXP, SEXP v_bar_jSEXP, SEXP lgamma_u_bar_jSEXP, SEXP digamma_u_bar_jSEXP, SEXP omega_lSEXP, SEXP log_pi_lSEXP, SEXP pi_bar_lSEXP, SEXP log_pi_bar_lSEXP, SEXP b_bar_lSEXP, SEXP omega_bar_lSEXP, SEXP u_kSEXP, SEXP v_kSEXP, SEXP log_pi_kSEXP, SEXP pi_bar_kSEXP, SEXP log_pi_bar_kSEXP, SEXP u_bar_kSEXP, SEXP v_bar_kSEXP, SEXP lgamma_u_bar_kSEXP, SEXP digamma_u_bar_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< bool >::type fit_intercept(fit_interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_scale(fit_scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type refit(refitSEXP);
    Rcpp::traits::input_parameter< double >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type omega_j(omega_jSEXP);
    Rcpp::traits::input_parameter< double >::type u_j(u_jSEXP);
    Rcpp::traits::input_parameter< double >::type v_j(v_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_j(log_pi_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pi_bar_j(pi_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_bar_j(log_pi_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b_bar_j(b_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type omega_bar_j(omega_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_bar_j(u_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v_bar_j(v_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lgamma_u_bar_j(lgamma_u_bar_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type digamma_u_bar_j(digamma_u_bar_jSEXP);
    Rcpp::traits::input_parameter< double >::type omega_l(omega_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_l(log_pi_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pi_bar_l(pi_bar_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_bar_l(log_pi_bar_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b_bar_l(b_bar_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type omega_bar_l(omega_bar_lSEXP);
    Rcpp::traits::input_parameter< double >::type u_k(u_kSEXP);
    Rcpp::traits::input_parameter< double >::type v_k(v_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_k(log_pi_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pi_bar_k(pi_bar_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_bar_k(log_pi_bar_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_bar_k(u_bar_kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v_bar_k(v_bar_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lgamma_u_bar_k(lgamma_u_bar_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type digamma_u_bar_k(digamma_u_bar_kSEXP);
    rcpp_result_gen = Rcpp::wrap(mich_cpp(y, J, L, K, mu_0, lambda_0, fit_intercept, fit_scale, refit, max_iter, verbose, tol, omega_j, u_j, v_j, log_pi_j, pi_bar_j, log_pi_bar_j, b_bar_j, omega_bar_j, u_bar_j, v_bar_j, lgamma_u_bar_j, digamma_u_bar_j, omega_l, log_pi_l, pi_bar_l, log_pi_bar_l, b_bar_l, omega_bar_l, u_k, v_k, log_pi_k, pi_bar_k, log_pi_bar_k, u_bar_k, v_bar_k, lgamma_u_bar_k, digamma_u_bar_k));
    return rcpp_result_gen;
END_RCPP
}
// multi_mich_cpp
List multi_mich_cpp(NumericMatrix y, NumericVector mu_0, bool fit_intercept, bool refit, double max_iter, double tol, bool verbose, double omega_l, NumericMatrix log_pi_l, NumericVector omega_bar_l, NumericVector log_omega_bar_l, List post_params);
RcppExport SEXP _mich_multi_mich_cpp(SEXP ySEXP, SEXP mu_0SEXP, SEXP fit_interceptSEXP, SEXP refitSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP omega_lSEXP, SEXP log_pi_lSEXP, SEXP omega_bar_lSEXP, SEXP log_omega_bar_lSEXP, SEXP post_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< bool >::type fit_intercept(fit_interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type refit(refitSEXP);
    Rcpp::traits::input_parameter< double >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type omega_l(omega_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type log_pi_l(log_pi_lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega_bar_l(omega_bar_lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_omega_bar_l(log_omega_bar_lSEXP);
    Rcpp::traits::input_parameter< List >::type post_params(post_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_mich_cpp(y, mu_0, fit_intercept, refit, max_iter, tol, verbose, omega_l, log_pi_l, omega_bar_l, log_omega_bar_l, post_params));
    return rcpp_result_gen;
END_RCPP
}
// mean_scp
List mean_scp(NumericVector y, NumericVector lambda, double omega, NumericVector log_pi);
RcppExport SEXP _mich_mean_scp(SEXP ySEXP, SEXP lambdaSEXP, SEXP omegaSEXP, SEXP log_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_pi(log_piSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_scp(y, lambda, omega, log_pi));
    return rcpp_result_gen;
END_RCPP
}
// multi_mean_scp
List multi_mean_scp(NumericMatrix y, NumericVector omega_bar, NumericVector log_omega_bar, NumericVector log_pi);
RcppExport SEXP _mich_multi_mean_scp(SEXP ySEXP, SEXP omega_barSEXP, SEXP log_omega_barSEXP, SEXP log_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega_bar(omega_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_omega_bar(log_omega_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_pi(log_piSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_mean_scp(y, omega_bar, log_omega_bar, log_pi));
    return rcpp_result_gen;
END_RCPP
}
// var_scp
List var_scp(NumericVector y, NumericVector omega, NumericVector u_bar, NumericVector lgamma_u_bar, NumericVector v, NumericVector log_pi);
RcppExport SEXP _mich_var_scp(SEXP ySEXP, SEXP omegaSEXP, SEXP u_barSEXP, SEXP lgamma_u_barSEXP, SEXP vSEXP, SEXP log_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_bar(u_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lgamma_u_bar(lgamma_u_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_pi(log_piSEXP);
    rcpp_result_gen = Rcpp::wrap(var_scp(y, omega, u_bar, lgamma_u_bar, v, log_pi));
    return rcpp_result_gen;
END_RCPP
}
// meanvar_scp
List meanvar_scp(NumericVector y, NumericVector lambda, double omega, NumericVector u_bar, NumericVector lgamma_u_bar, NumericVector v, NumericVector log_pi);
RcppExport SEXP _mich_meanvar_scp(SEXP ySEXP, SEXP lambdaSEXP, SEXP omegaSEXP, SEXP u_barSEXP, SEXP lgamma_u_barSEXP, SEXP vSEXP, SEXP log_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_bar(u_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lgamma_u_bar(lgamma_u_barSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type log_pi(log_piSEXP);
    rcpp_result_gen = Rcpp::wrap(meanvar_scp(y, lambda, omega, u_bar, lgamma_u_bar, v, log_pi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mich_multi_mu_bar_fn", (DL_FUNC) &_mich_multi_mu_bar_fn, 2},
    {"_mich_multi_mu2_bar_fn", (DL_FUNC) &_mich_multi_mu2_bar_fn, 3},
    {"_mich_mu_bar_fn", (DL_FUNC) &_mich_mu_bar_fn, 2},
    {"_mich_mu2_bar_fn", (DL_FUNC) &_mich_mu2_bar_fn, 3},
    {"_mich_lambda_bar_fn", (DL_FUNC) &_mich_lambda_bar_fn, 3},
    {"_mich_mu_lambda_fn", (DL_FUNC) &_mich_mu_lambda_fn, 4},
    {"_mich_mu2_lambda_fn", (DL_FUNC) &_mich_mu2_lambda_fn, 5},
    {"_mich_mich_cpp", (DL_FUNC) &_mich_mich_cpp, 39},
    {"_mich_multi_mich_cpp", (DL_FUNC) &_mich_multi_mich_cpp, 12},
    {"_mich_mean_scp", (DL_FUNC) &_mich_mean_scp, 4},
    {"_mich_multi_mean_scp", (DL_FUNC) &_mich_multi_mean_scp, 4},
    {"_mich_var_scp", (DL_FUNC) &_mich_var_scp, 6},
    {"_mich_meanvar_scp", (DL_FUNC) &_mich_meanvar_scp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_mich(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
